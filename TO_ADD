# Impute:

imputer = ColumnTransformer(
    transformers=[
        ('numerical', SimpleImputer(strategy='median'), type_features['numerical']),
        ('ordinal', SimpleImputer(strategy='most_frequent'), type_features['ordinal']),
        ('nominal', SimpleImputer(strategy='most_frequent'), type_features['nominal']),
    ],
    remainder='drop',
    verbose=False,
    verbose_feature_names_out=False,
)

# Encode:

encoder = ColumnTransformer(
    transformers=[
        ('numerical', 'passthrough', type_features['numerical']),
        ('ordinal', OneHotEncoder(
            categories=[
                discrete[f]
                for f in type_features['ordinal']
            ],
            drop='first',
            sparse_output=False,
            handle_unknown='error',
        ), type_features['ordinal']),
        ('nominal', OneHotEncoder(
            categories=[
                discrete[f]
                for f in type_features['nominal']
            ],
            drop='first',
            sparse_output=False,
            handle_unknown='error',
        ), type_features['nominal']),
    ],
    remainder='drop',
    verbose=False,
    verbose_feature_names_out=False,
)

# Standardizer:

standardizer = ColumnTransformer(
    transformers=[
        ('numerical', StandardScaler(), type_features['numerical']),
    ],
    remainder='passthrough',
    verbose=False,
    verbose_feature_names_out=False,
)

# Preprocess:

preprocess = Pipeline([
    ('fixer', fixer),
    ('imputer', imputer),
    ('encoder', encoder),
    ('standardizer', standardizer),
], verbose=False)

# Pipeline:

pipeline = Pipeline([
    ('preprocess', preprocess),
    ('learning', SGDRegressor(
        penalty='elasticnet',
        alpha=0.1,
        l1_ratio=0.9,
        random_state=110,
    )),
], verbose=False)
